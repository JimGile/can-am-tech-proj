// <auto-generated />
using System;
using LibraryApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryApp.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("LibraryApp.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "F. Scott Fitzgerald",
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsAvailable = true,
                            RowVersion = new byte[0],
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "George Orwell",
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsAvailable = true,
                            RowVersion = new byte[0],
                            Title = "1984"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Harper Lee",
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsAvailable = true,
                            RowVersion = new byte[0],
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Yuval Noah Harari",
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsAvailable = true,
                            RowVersion = new byte[0],
                            Title = "Sapiens"
                        },
                        new
                        {
                            BookId = 5,
                            Author = "Tara Westover",
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsAvailable = true,
                            RowVersion = new byte[0],
                            Title = "Educated"
                        },
                        new
                        {
                            BookId = 6,
                            Author = "Michelle Obama",
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsAvailable = true,
                            RowVersion = new byte[0],
                            Title = "Becoming"
                        },
                        new
                        {
                            BookId = 7,
                            Author = "J.D. Salinger",
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsAvailable = true,
                            RowVersion = new byte[0],
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            BookId = 8,
                            Author = "Aldous Huxley",
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsAvailable = true,
                            RowVersion = new byte[0],
                            Title = "Brave New World"
                        },
                        new
                        {
                            BookId = 9,
                            Author = "Rebecca Skloot",
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsAvailable = true,
                            RowVersion = new byte[0],
                            Title = "The Immortal Life of Henrietta Lacks"
                        },
                        new
                        {
                            BookId = 10,
                            Author = "Cormac McCarthy",
                            CategoryId = 1,
                            DateCreated = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsAvailable = true,
                            RowVersion = new byte[0],
                            Title = "The Road"
                        },
                        new
                        {
                            BookId = 11,
                            Author = "Daniel Kahneman",
                            CategoryId = 2,
                            DateCreated = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsAvailable = true,
                            RowVersion = new byte[0],
                            Title = "Thinking, Fast and Slow"
                        });
                });

            modelBuilder.Entity("LibraryApp.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Science"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "History"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Self-Help"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Religion"
                        });
                });

            modelBuilder.Entity("LibraryApp.Models.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.HasKey("LoanId");

                    b.HasIndex("BookId");

                    b.HasIndex("MemberId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("LibraryApp.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("TEXT");

                    b.HasKey("MemberId");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            MemberId = 1,
                            Email = "iBZ9y@example.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            MembershipDate = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            MemberId = 2,
                            Email = "bNQ5f@example.com",
                            FirstName = "Jane",
                            IsActive = true,
                            LastName = "Smith",
                            MembershipDate = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("LibraryApp.Models.Book", b =>
                {
                    b.HasOne("LibraryApp.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryApp.Models.Loan", b =>
                {
                    b.HasOne("LibraryApp.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApp.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
